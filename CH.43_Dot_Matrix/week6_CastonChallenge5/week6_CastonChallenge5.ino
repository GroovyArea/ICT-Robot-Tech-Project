#include <FrequencyTimer2.h>

#define M \
  { \
    { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 0, 1, 0, 0, 1, 0, 1 }, \
      { 1, 0, 0, 1, 1, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
  }

#define E \
  { \
    { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
  }



#define C \
  { \
    { 0, 0, 0, 0, 0, 1, 1, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 1, 0, 0, 0, 0, 0 }, \
      { 0, 1, 0, 0, 0, 0, 0, 0 }, \
      { 0, 1, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 1, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 1, 1, 0 }, \
  }


#define H \
  { \
    { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
  }


#define A \
  { \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 1, 0, 0, 1, 0, 0 }, \
      { 0, 0, 1, 0, 0, 1, 0, 0 }, \
      { 0, 1, 1, 1, 1, 1, 1, 0 }, \
      { 0, 1, 0, 0, 0, 0, 1, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
  }


#define T \
  { \
    { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
  }


#define R \
  { \
      { 1, 1, 1, 1, 1, 1, 1, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 0 }, \
      { 1, 0, 0, 0, 1, 0, 0, 0 }, \
      { 1, 0, 0, 0, 0, 1, 0, 0 }, \
      { 1, 0, 0, 0, 0, 0, 1, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
  }

#define O \
  { \
    { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 1, 0, 0, 1, 0, 0 }, \
      { 0, 1, 0, 0, 0, 0, 1, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 0, 1, 0, 0, 0, 0, 1, 0 }, \
      { 0, 0, 1, 0, 0, 1, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
  }

#define N \
  { \
    { 1, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 1, 0, 0, 0, 0, 0, 1 }, \
      { 1, 0, 1, 0, 0, 0, 0, 1 }, \
      { 1, 0, 0, 1, 0, 0, 0, 1 }, \
      { 1, 0, 0, 0, 1, 0, 0, 1 }, \
      { 1, 0, 0, 0, 0, 1, 0, 1 }, \
      { 1, 0, 0, 0, 0, 0, 1, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 1 }, \
  }

#define I \
  { \
    { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 0, 0, 0, 1, 1, 0, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
  }

#define S \
  { \
    { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 0, 0, 0, 0, 0, 0, 0 }, \
      { 1, 0, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 0, 0, 0, 0, 0, 0, 0, 1 }, \
      { 0, 0, 0, 0, 0, 0, 0, 1 }, \
      { 0, 0, 0, 0, 0, 0, 0, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
  }

int pin[17] = { -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 };
int col[8] = { pin[9], pin[10], pin[11], pin[12], pin[13], pin[14], pin[15], pin[16] };
int row[8] = { pin[1], pin[2], pin[3], pin[4], pin[5], pin[6], pin[7], pin[8] };

int sw = 2;
int columnIndex = 0;
byte LED[8][8];

int pattern = 0;

const int totalPatterns = 12;
byte patterns[totalPatterns][8][8] = { M, E, C, H, A, T, R, O, N, I, C, S };

void setup() {
  for (int i = 1; i <= 16; i++) {
    pinMode(pin[i], OUTPUT);
  }

  pinMode(sw, INPUT);

  initDotMatrix();

  FrequencyTimer2::setOnOverflow(display);
  attachInterrupt(digitalPinToInterrupt(sw), fallingEventAct, FALLING);
}

void initDotMatrix() {
  for (int i = 0; i < 8; i++) {
    digitalWrite(row[i], LOW);
    digitalWrite(col[i], HIGH);
  }
}

void display() {
  digitalWrite(col[columnIndex], HIGH);
  columnIndex++;

  if (columnIndex == 8) {
    columnIndex = 0;
  }

  for (int i = 0; i < 8; i++) {
    if (LED[columnIndex][7 - i] == 1) {
      digitalWrite(row[i], HIGH);
    } else {
      digitalWrite(row[i], LOW);
    }
  }

  digitalWrite(col[columnIndex], LOW);
}

void patternOutputOperate(int pattern) {
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      LED[i][j] = patterns[pattern][i][j];
    }
  }
}

void fallingEventAct() {
  pattern++;

  if (pattern == 12) {
    pattern = 0;
  } else {
    delay(300);
  }

  patternOutputOperate(pattern);
}

void loop() {
  // put your main code here, to run repeatedly:
}